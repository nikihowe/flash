/**
 * \file Particle.h
 *
 * \ingroup ERTool
 * 
 * \brief Class def header for a class Particle
 *
 * @author kazuhiro
 */

/** \addtogroup ERTool

    @{*/
#ifndef ERTOOL_PARTICLE_H
#define ERTOOL_PARTICLE_H

#include <iostream>
#include <TObject.h>
#include "Env.h"
#include "GeoAlgo/GeoVector.h"
#include "ERException.h"

namespace ertool {
  //class Particle;
  /**
     \class Particle
     @brief Tree-structured data holder to represent a reconstructed particle
     ertool::Particle is meant to represent a reconstructed particle with a hierarchy       \n
     structure (tree data structure). Each ertool::Particle has PDG code which represents   \n
     a specific particle type. Additional parameters include vtx, momentum, energy, daughter \n
     particle list, and a likelihood score. The likelihood score determines how likely this  \n
     representation is correct. The daughter particle list is a set of ertool::Particle that\n
     is generated by the subject particle.
  */
  class Particle : public TObject {

  public:
    
    /// Default constructor
    Particle(int pdg_code=0,double mass=-1);

    /// Default destructor
    virtual ~Particle(){}

    /// Enum for shower/track (stored in EventData) or something else
    enum RecoObjType_t {
      kUnknown,
      kTrack,
      kShower,
      kTypeMax
    };

    /// Initializer
    void Reset();

    //
    // Getters
    //
    int    PdgCode() const { return _pdg_code; }
    double Score()   const { return _score;    }
    double Mass()    const { return _mass;     }
    double Energy()  const;
    double KineticEnergy()  const;
    const ::geoalgo::Vector& Vertex()   const { return _vtx; }
    const ::geoalgo::Vector& Momentum() const { return _mom; }
    const double& Time() const { return _time; }
    const std::vector<ertool::Particle>& Daughters() const { return _daughters; }
    int RecoObjID() const  { return _reco_obj_id; }
    RecoObjType_t Type() const { return _reco_obj_type; }
    double DaughterEnergySum() const;

    //
    // Setters
    //
    void Vertex(const ::geoalgo::Point_t& vtx);
    void Vertex(const double& x,
		const double& y,
		const double& z);
    void Time(const double& t) {_time = t;}
    void Momentum(const ::geoalgo::Vector_t& mom);
    void SetPdgCode(const int pdg) {_pdg_code = pdg;}
    void Momentum(const double& px,
		  const double& py,
		  const double& pz);
    void Score(const double v) { _score = v; }
    void AddDaughter(const Particle& s);
    void RecoObjInfo(const int id, const RecoObjType_t type);

    //
    // Utility function
    //
    bool Match(const Particle& p, bool exclusive=false) const;
    std::string Diagram() const;
    const std::vector<const ::ertool::Particle*> AllDaughters() const;

  protected:

    int _pdg_code;            ///< PDG code
    double _score;            ///< Likelihood
    double _mass;             ///< Particle mass
    ::geoalgo::Point_t _vtx;  ///< Creation Vertex [cm]
    ::geoalgo::Vector_t _mom; ///< Momentum [MeV/c]
    double _time;             ///< Creation Time [ns] ... pretty much only for MC
    std::vector<ertool::Particle> _daughters; ///< List of daughters

    /// Index of a Track/Shower stored in EventData
    int  _reco_obj_id;  
    /// Type of reconstructed object in EventData
    RecoObjType_t _reco_obj_type;

    void Diagram(std::string& res,std::string prefix="") const;
    void AllDaughters(std::vector<const ::ertool::Particle*>& part_v) const;
  private:

    ClassDef(Particle,1)

  };

  /*
    \class ParticleSet
    @brief a collection of ertool::Particle which has no mother
    ertool::ParticleSet is a simple collection of ertool::Particle that has  \n
    no mother (i.e. the root of particle history tree). 
   */
  class ParticleSet : public TObject,
		      public std::vector<ertool::Particle> {
		       
  public:

    ParticleSet(){}

    virtual ~ParticleSet(){}

    std::string Diagram() const;

    void Collapse();

    const std::vector<ertool::Particle>::iterator Find(const ::ertool::Particle& p,
						       bool exclusive=false);

    ClassDef(ParticleSet,1)
  };
  
}

#endif
/** @} */ // end of doxygen group 

